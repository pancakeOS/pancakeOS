name: Build PancakeOS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y zip wget

      - name: Create .love file
        run: |
          cd $GITHUB_WORKSPACE
          zip -9 -r pancakeos.love . -x '*.git*' '*.github*' '*.vscode*'

      - name: Build Linux AppImage-like tarball
        run: |
          # Create a simple tar.gz containing the .love file and a small launcher script
          mkdir -p pancakeos-linux
          cp pancakeos.love pancakeos-linux/
          cat > pancakeos-linux/run.sh <<'EOF'
          #!/bin/sh
          DIR=$(dirname "$0")
          exec love "$DIR/pancakeos.love"
          EOF
          chmod +x pancakeos-linux/run.sh
          tar -czf PancakeOS-linux.tar.gz -C pancakeos-linux .
          ls -la PancakeOS-linux.tar.gz

      - name: Build Windows .exe and zip
        run: |
          wget https://github.com/love2d/love/releases/download/11.5/love-11.5-win64.zip
          unzip love-11.5-win64.zip -d love-win64
          ls -l love-win64
          if [ -f love-win64/love.exe ]; then
            cat love-win64/love.exe pancakeos.love > PancakeOS.exe
          else
            cat love-win64/*/love.exe pancakeos.love > PancakeOS.exe
          fi
          cp love-win64/**/*.dll . || cp love-win64/*.dll .
          zip -r PancakeOS-windows.zip PancakeOS.exe *.dll

      - name: Build macOS .app
        run: |
          wget https://github.com/love2d/love/releases/download/11.5/love-11.5-macos.zip
          unzip love-11.5-macos.zip -d love-macos
          cp pancakeos.love love-macos/love.app/Contents/Resources/
          mv love-macos/love.app love-macos/PancakeOS.app
          # Optionally update Info.plist here for customizations
          cd love-macos
          zip -r ../PancakeOS-macOS.zip PancakeOS.app
          cd ..



      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PancakeOS-builds
          path: |
            pancakeos.love
            PancakeOS-windows.zip
            PancakeOS-macOS.zip
              PancakeOS-linux.tar.gz

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: build
    permissions:
      contents: write
      checks: write
    env:
      TOKEN: ${{ secrets.TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: PancakeOS-builds

      - name: Fail if TOKEN secret missing
        run: |
          if [ -z "$TOKEN" ]; then echo "Required secret TOKEN is not set. Aborting release."; exit 1; fi


      - name: Number release as #N
        id: number_release
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const releases = await github.rest.repos.listReleases({ owner, repo, per_page: 100 });
            // Count only non-draft releases
            const count = releases.data.filter(r => !r.draft).length;
            const releaseNumber = count; // the release created event is already in the list
            const name = `#${releaseNumber}`;
            await github.rest.repos.updateRelease({ owner, repo, release_id: context.payload.release.id, name });
            return { name };
        env:
          GITHUB_TOKEN: ${{ env.TOKEN }}

      - name: Build Windows release zip (ensure asset exists)
        run: |
          if [ ! -f PancakeOS-windows.zip ]; then echo "PancakeOS-windows.zip missing"; ls -la; exit 1; fi

      - name: Build macOS release zip (ensure asset exists)
        run: |
          if [ ! -f PancakeOS-macOS.zip ]; then echo "PancakeOS-macOS.zip missing"; ls -la; exit 1; fi

      - name: Ensure .love exists
        run: |
          if [ ! -f pancakeos.love ]; then echo "pancakeos.love missing"; ls -la; exit 1; fi

      - name: Ensure Linux tarball exists
        run: |
          if [ ! -f PancakeOS-linux.tar.gz ]; then echo "PancakeOS-linux.tar.gz missing"; ls -la; exit 1; fi

      # release already exists; will attach assets below

      - name: Upload release assets (windows)
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./PancakeOS-windows.zip
          asset_name: PancakeOS-windows.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ env.TOKEN }}

      - name: Upload release assets (macOS)
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./PancakeOS-macOS.zip
          asset_name: PancakeOS-macOS.zip
          asset_content_type: application/zip

      - name: Upload release asset (.love)
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./pancakeos.love
          asset_name: pancakeos.love
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ env.TOKEN }}

      - name: Upload release asset (linux tar.gz)
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./PancakeOS-linux.tar.gz
          asset_name: PancakeOS-linux.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ env.TOKEN }}
